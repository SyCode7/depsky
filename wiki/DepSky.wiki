=*Getting Started with DepSky*=

This section explain you how create the providers accounts. If you want test DepSky without create the accounts, you can use local storage instead. Please read the next section called *Testing DepSky*.

First of all, go to the download page and get the latest stable version available. After the download is finished, you need to extract the archive downloaded. Make sure you have java 1.7 or later installed.

Done this, you need to fill up the accounts.properties file (you can find it inside the config folder). To fill up this file you need first create accounts in the cloud providers we support. To do that follow the links below:

  * Amazon S3 - http://aws.amazon.com/pt/s3/
  * Google Storage - https://developers.google.com/storage/
  * RackSpace - http://www.rackspace.co.uk/
  * Windows Azure - https://www.windowsazure.com/en-us/

After create the accounts you have access to yours API keys and so, you can fill up the accounts.properties file. To help you to find your keys, follow the steps below.

 * To find Amazon s3 keys go to the AWS Management Console, click in S3 service, now, in the upper right corner click in your account name and go to the Security Credentials. After that, in the Access Keys separator you can find your access key, and your secret key.

 * To find Google Storage keys go to the Google API Console, and then go to the Google Cloud Storage separator. Now choose Interoperable Access and there you can find your keys. Don't forget first enable Google Cloud Storage in the services separator.

 * To find RackSpace keys, go to the Control Panel. In the upper right corner you can find how to get your secret key. The access key is just your login username.

 * To find Windows Azure keys go to the windows azure portal. First you need to create a new storage project. Atfer select this new project, at the botton of the page, you can find the key management. In this case your access key is your storage project name and you secret key is the primary key in the key manegement.

Now all the setup is finished and DepSky is ready to be used.



=*Testing DepSky*=

To test DepSky we provide a simple main that can be found in {{{src.depskys.core.LocalDepSkySClient}}}. To run this main use the DepSky_Run.sh scritp at the root of the project providing 3 arguments:

 * The first one is the client id (for now use ids below 6 because we only have keys generated for ids until the 6).
 * The second argument indicates what protocol will be used to replicate the data. There are 4 possibilities:

    -> 0 means that will be used DepSky-A (there is no erasure codes neither secret sharing).

    -> 1 to use DepSky-CA (use erasure codes and secret sharing).

    -> 2 for use only erasure codes. 

    -> 3 to use only secret sharing. 

 * The third argument indicated the storage location.

    -> 0 if you want to use cloud storage to replicate the data.

    -> 1 if you want to store all the data locally (testing purposes). If you want to use the local storage you need first run the server that can be found in {{{src.depskys.clouds.drivers.localStorageService.ServerThread}}}. To run this server you can use the Run_LocalStorage.sh script at the root fo the project. This server will receive all requests at ip 127.0.0.1 and port 5555.

LetÂ´s do an example to exemplify. If we run DepSky with the command below, we gonna start a session with the client id 0, all the data will be replicated using erasure codes and secret sharing and will be stored on the cloud providers.

{{{
$ ./DepSky_Run 0 1 0
}}}

This main allow you to read, write and delete. You have five commands available:

 * {{{pick_du 'name'}}} - will change the container that you are using to read and write.
 * {{{write 'data'}}} - will write a new version with the content 'data' over the container selected.
 * {{{read}}} - will read the last version written to the container selected
 * {{{delete}}} - will delete all the data (data and metadata files) associated with the container selected.
 * {{{read_m 'num'}}} - will read old versions over the container selected. If 'num' = 0, will read the last version written, if 'num' = 1, will read the penultimate version written, etc. Note that only is possible read old versions written in this session because this main maintain all the information in memory. To read all the old versions this main must be changed.

=*Using DepSky as a Library*=

To start, you need to create a {{{src.depskys.core.LocalDepSkySClient}}} object. As you can see below, the constructor receive the client id (for now use ids below 6 because we only have keys generated for ids until the 6) and a boolean. If the boolean value come false, will be used the *local storage*, if come true, will be used the *cloud storage*

{{{
public LocalDepSkySClient(int clientId, boolean useModel){

		this.clientId = clientId;
		if(!useModel){
			this.cloud1 = new LocalDiskDriver("cloud1");
			this.cloud2 = new LocalDiskDriver("cloud2");
			this.cloud3 = new LocalDiskDriver("cloud3");
			this.cloud4 = new LocalDiskDriver("cloud4");
			this.drivers = new IDepSkySDriver[]{cloud1, cloud2, cloud3, cloud4};
		}else{	
			List<String[][]> credentials = null;
			try {
				credentials = readCredentials();
			} catch (FileNotFoundException e) {
				System.out.println("accounts.properties file dosen't exist!");
				e.printStackTrace();
			} catch (ParseException e) {
				System.out.println("accounts.properties misconfigured!");		
				e.printStackTrace();
			}
			this.drivers = new IDepSkySDriver[4];
			String type = null, driverId = null, accessKey = null, secretKey = null;
			for(int i = 0 ; i < credentials.size(); i++){
				for(String[] pair : credentials.get(i)){
					if(pair[0].equalsIgnoreCase("driver.type")){
						type = pair[1];
					}else if(pair[0].equalsIgnoreCase("driver.id")){
						driverId = pair[1];
					}else if(pair[0].equalsIgnoreCase("accessKey")){
						accessKey = pair[1];
					}else if(pair[0].equalsIgnoreCase("secretKey")){
						secretKey = pair[1];
					}
				}
				drivers[i] = DriversFactory.getDriver(type, driverId, accessKey, secretKey);
			}

		}	
		this.manager = new DepSkySManager(drivers, this);
		this.replies = new HashMap<Integer, CloudRepliesControlSet>();
		this.N = drivers.length;
		this.F = 1;
		this.encoder = new ReedSolEncoder(2, 2, 8);
		this.decoder = new ReedSolDecoder(2, 2, 8);

		if(!startDrivers()){
			System.out.println("Connection Error!");
		}	
	}
}}}

The second step is create too many {{{src.depskys.core.DepSkySDataUnit}}} as you want. Each object of this type represents a container and contain information like the protocol used to replicate the data, metadata information, etc. To create a {{{DepSkySDataUnit}}} object just need to pass the container name you want, as you can see in the contructor below. If you create a {{{DepSkySDataUnit}}} with a name that already exist, it will point to the one that already exist.

{{{
  public DepSkySDataUnit(String regId) {
        this.regId = regId;
        this.lastVersionNumber = -1;
        this.idsCache = new HashMap<String, String>();
        this.cloudVersions = new HashMap<String, Long>();
        this.previousMetadata = new HashMap<String, String>();
        this.isPVSS = this.isErsCodes = this.isSecSharing = false;
    }
}}}

After creating a {{{DepSkySDataUnit}}}object, you need to specify what protocol will be used to replicate the data that will be written in this container. By default, each {{{DepSkySDataUnit}}}object will use DepSky-A (data is replicated in _clear text_). To use one of the others three protocols follow the code below.

{{{
DepSkySDataUnit dataUnit = new DepSkySDataUnit("container");
dataUnit.setUsingPVSS(true); //to use DepSky-CA
dataUnit.setUsingErsCodes(true); //to use only erasure codes
dataUnit.setUsingSecSharing(true); //to use only secret sharing
}}}

When you want to do some operation in the {{{LocalDepSkySClient}}} object (read, write, etc) you have to use a {{{DepSkySDataUnit}}} object.

==*Write*==

When you want to use the write operation, you have to pass the DepSkySDataUnit object for which you want to write and the data to be written. As we can see below, this operation return a {{{byte[]}}}. This {{{byte[]}}} is a SHA-1 hash of the written data. This hash must be saved by the client if he want to use the read matching operation (see bellow).

{{{
public synchronized byte[] write(DepSkySDataUnit reg, byte[] value) throws Exception {
...
}}}


==*Read*==

To use this operation, you only have as argument the {{{DepSkySDataUnit}}} object. This operation will read the last version written to this {{{DepSkySDataUnit}}}.

{{{
public synchronized byte[] read(DepSkySDataUnit reg) throws Exception {
...
}}}

==*Read Matching*==

This operation have the function of read a old version of a given {{{DepSkySDataUnit}}}. To do that you have to pass a {{{byte[]}}} containing the hash of the version you want to read. This hash is the one returned by the write operation.

{{{
public synchronized byte[] readMatching(DepSkySDataUnit reg, byte[] hashMatching) throws Exception{
...
}}}

==*Delete*==

The delete operation will delete all the files associated with the given {{{DepSkySDataUnit}}}, that includes all the versions written and the metadata file.

{{{
public synchronized void deleteContainer(DepSkySDataUnit reg) throws Exception{
...
}}}