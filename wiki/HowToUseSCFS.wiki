=*Getting Started with SCFS*=

This page describe how you can configure, install and use the available version of SCFS. This pre-alpha version does not support the use of Zookepeer as coordination service and only Amazon S3 can be used as a backend of a single cloud storage. Take a look at the [SCFS] wiki page before continuing reading this page. 

The first step is go to the [Downloads] page and get the latest version available of SCFS. After the download is finished, you need to extract the archive downloaded. Make sure you have java 1.7 or later installed.

The next step is to configure all the necessary files. More specifically, it is necessary to fill configuration files for DepSky, DepSpace and SCFS. The following subsections explain how to do it.

===!DepSky===

To fill !DepSky configuration files please read the *'Getting Started with !DepSky'* section in HowToUseDepSky page. Here you can learn how to create the clouds storage accounts and where can you get the necessary API keys.

As you can see


===DepSpace===

[http://www.navigators.di.fc.ul.pt/software/depspace/ DepSpace] configuration consists in two main steps; the address and port configuration of all DepSpace's replicas, and the configuration of system parameters. This could be done in config/hosts.config and config/system.config files respectively. To comment out a configuration parameter in those files, the line must start with the character #.

DepSpace is built on top of [http://code.google.com/p/bft-smart/ BFT-SMaRt]. Please take a look at [http://code.google.com/p/bft-smart/wiki/Configuration How to configure BFT-SMaRt replicas].

In hosts.config file you can set the address and port of all DepSpace replicas. The configuration file should look like this:

{{{
#server id, address and port (the ids from 0 to n-1 are the service replicas) 
0 127.0.0.1 11000
1 127.0.0.1 11010
2 127.0.0.1 11020
3 127.0.0.1 11030
4 127.0.0.1 11040
5 127.0.0.1 11050
6 127.0.0.1 11060
7 127.0.0.1 11070
}}}


After the configuration of the replicas address and port, you can set the parameter Besides the parameters you need to set to [http://code.google.com/p/bft-smart/ BFT-SMaRt], there are others you need to configure to [http://www.navigators.di.fc.ul.pt/software/depspace/ DepSpace]. These parameters are described below:

|| *Parameter* || *Description* || *Values* || *Default value* ||
|| system.general.rdRetryTime || The time the system blocks on rd operation waiting for a match tuple in the space. SCFS does not uses this operation. || Integer (miliseconds) || 10000 ||
|| system.general.realTimeRenew || Use or not of renewable tuples. Note that SCFS needs this parameter to be true. || true or false || true ||
|| system.general.logging || Use or not of logging. Set this parameter to true if you want it. || true or false || false ||
|| system.general.logging.mode || Set the logging mode. Set this parameter to 0 if you have set the logging use to false. The other modes are: 1="rw", 2="rws", (any other)="rwd" || Integer || 0 ||
|| system.general.batching || Use batches of messages. We recommend you to set this to false. || true or false || false ||
|| system.general.checkpoint_period || The period in which the system performs a checkpoint of its state. || Integer (number of operations) || 1000 ||
|| system.general.replaceTrigger || The usage or not of the DepSpace's replace trigger layer. Note that SCFS needs this layer to correctly work. || true or false || true ||


We recommend you to use the default values set in the config/system.config file in the SCFS.zip file available in [Downloads].



==== Public Keys ====
If you need to generate public/private keys for !DepSpace replicas or clients, you can use the following command to generate files for public and private keys:

./rsaKeyPairGenerator.sh <id of the replica/client>

Keys are stored in the config/keys folder. The command above creates key pairs both for clients and replicas. Currently such keys need to be manually distributed. 

===SCFS===



=*Deploying DepSpace*=

=*Mounting SCFS*=

=*Using SCFS*=